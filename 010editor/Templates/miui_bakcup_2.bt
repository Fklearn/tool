//--------------------------------------
//--- 010 Editor v6.0.2 Binary Template
//
// File: miui_backup_2.bt
// Author:  shlu
// Revision: v1.0.0
// Magic: MIUI BACKUP\n
// Purpose:
//--------------------------------------
SetForeColor(cWhite);
local char DEF_MAGIC[] ="MIUI BACKUP\n";
typedef struct{
    char magic[readOffset('\n',-1)+1]<bgcolor=cRed>;
    char version[readOffset('\n',-1)]<bgcolor=cGreen,fgcolor=cBlack>;
    if(version[0]!='2'){
        Printf("version !=2\n");
        Exit(-1);
    }
    readByte(1);
    char temp[readOffset('\n',-1)]<hidden=true,bgcolor=cNone ,fgcolor=cNone >;
    unreadByte(Strlen(temp));
    local int tabOffset=readOffset(' ',Strlen(temp));
    if(tabOffset!=-1){
           char packageName[tabOffset]<bgcolor=cBlue >;
           readByte(1);
           char apkName[readOffset('\n',-1)]<bgcolor=cPurple>;
           readByte(1);
    }else{
           char packageName[Strlen(temp)-1]<bgcolor=cBlue>;           
           readByte(1);
    }
    char featureId[readOffset('\n',-1)]<bgcolor=cAqua,fgcolor=cBlack>;
    readByte(1);
    char isEncrypted[readOffset('\n',-1)]<bgcolor=cYellow,fgcolor=cBlack>;
    readByte(1);
    if(isEncrypted[0]=='1'){
       char password[readOffset('\n',-1)];
    }
    byte data[readEndOffset()+1]<bgcolor=cGray>;
} MIUI_BACKUP_2;
int readOffset(char key,int max){
    local int i=0;
    local int pc=FTell();
    if(max==-1)max=FileSize();
    while(true){
       if(ReadByte(pc+i)==key){
          break;
       }
       if(max<=(pc+i+1)){
           i=-1;
           break;
       }
       i++;
    }
    FSeek(pc);
    return i;
}
int readEndOffset(){
    return (FileSize()-1)-FTell();
}

void unreadByte(int len){
    FSeek(FTell()-len);
}
void readByte(int len){
    FSeek(FTell()+len);
}

MIUI_BACKUP_2 root;
